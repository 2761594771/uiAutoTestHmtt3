{"name": "test_mp_login[13812345678-246810-Xeon]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <scripts.test01_mp_login.TestMpLogin object at 0x000001B829A9D250>, username = '13812345678', code = '246810', expect_result = 'Xeon'\n\n    @pytest.mark.parametrize(\"username,code,expect_result\", read_yaml(\"mp_login.yaml\"))\n    def test_mp_login(self, username, code, expect_result):\n        # 调用登录业务方法\n        self.mp.page_mp_login(username, code)\n        try:\n            # 断言\n>           assert expect_result == self.mp.page_get_nickname()\n\nscripts\\test01_mp_login.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\page_mp_login.py:25: in page_get_nickname\n    return  self.base_get_text(page.mp_nickname)\nbase\\base.py:46: in base_get_text\n    return self.base_find(loc).text\nbase\\base.py:24: in base_find\n    return (WebDriverWait(self.driver,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2fa21478b2deb70e7adf656c8344e206\")>, method = <function Base.base_find.<locals>.<lambda> at 0x000001B829E070D0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvun\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": 